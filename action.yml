name: 'Build and push images to registry'
description: 'This GitHub Action builds a container image and pushes it to the specified registry.'
author: 'RHSCL team'
branding:
  icon: circle
  color: blue

inputs:
  registry:
    description: 'Registry to push container image to'
    required: true
  registry_namespace:
    description: 'Namespace of the registry, where the image would be pushed'
    required: true
  image_name:
    description: 'How the resulting image will be named'
    required: true
  registry_username:
    description: 'Login to specified registry'
    required: true
  registry_token:
    description: 'Token to access the specified registry'
    required: true
  tag:
    description: 'Tag of the built image'
    required: true
  dockerfile:
    description: 'Dockerfile to build the image with a relative path'
    required: false
    default: 'Dockerfile'
  docker_context:
    description: 'Docker build context'
    required: false
    default: '.'
  use_distgen:
    description: 'The action will use distgen for generating dockerfiles if true'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Login to registry - to fail in the beggining of action if creds are incorrect
      uses: redhat-actions/podman-login@v1
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_token }}

    - name: Checkout git
      uses: actions/checkout@v2
      with:
       submodules: true

    - name: Prepare needed variables
      shell: bash
      id: vars
      run: |
        tmp="${{ inputs.dockerfile }}"
        dockerfile="${tmp#*/}"
        distribution="${dockerfile#*Dockerfile.}"
        [[ -z "$distribution" ]] && distribution="centos7"
        echo "::set-output name=cur_date::$(date +'%Y%m%d')"
        echo "::set-output name=dockerfile_path::${tmp%/*}"
        echo "::set-output name=distribution::${distribution}"

    - name: Install distgen and generate source
      if: ${{ inputs.use_distgen == 'true' }}
      shell: bash
      run: |
        sudo apt-get update -y && sudo apt-get install -y python3 python3-pip
        pip3 -v install distgen
        DG=$HOME/.local/bin/dg make generate-all

    # exclusion mechanism.
    # when .exlude-<distribution> file in Dockerfile folder exists,
    # the particular image would not be built
    - name: Check if .exclude-${{ steps.vars.outputs.distribution }} is present in ${{ steps.vars.outputs.dockerfile_path }} directory
      id: check_exclude_file
      # https://github.com/marketplace/actions/file-existence
      uses: andstor/file-existence-action@v1
      with:
        files: "${{ steps.vars.outputs.dockerfile_path }}/.exclude-${{ steps.vars.outputs.distribution }}"

    - name: Check if ${{ inputs.dockerfile }} is present
      if: steps.check_exclude_file.outputs.files_exists == 'false'
      id: check_dockerfile_file
      # https://github.com/marketplace/actions/file-existence
      uses: andstor/file-existence-action@v1
      with:
        files: "${{ inputs.dockerfile }}"
        allow_failure: true # fails the Action if Dockerfile is missing

    - name: Build image
      if: steps.check_exclude_file.outputs.files_exists == 'false'
      id: build-image
      # https://github.com/marketplace/actions/buildah-build
      uses: redhat-actions/buildah-build@v2
      with:
        dockerfiles: ${{ inputs.dockerfile }}
        image: ${{ inputs.image_name}}
        context: ${{ inputs.docker_context }}
        tags: latest ${{ inputs.tag }} ${{ steps.vars.outputs.cur_date }} ${{ github.sha }}

    - name: Push image to Quay.io/${{ inputs.registry_namespace }} namespace
      if: steps.check_exclude_file.outputs.files_exists == 'false'
      id: push-to-registry
      uses: redhat-actions/push-to-registry@v2.2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ inputs.registry }}/${{ inputs.registry_namespace }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_token }}

    - name: Print image url
      if: steps.check_exclude_file.outputs.files_exists == 'false'
      shell: bash
      run: echo "Image ${{ inputs.image_name }} has been pushed to ${{ steps.push-to-registry.outputs.registry-paths }}."
